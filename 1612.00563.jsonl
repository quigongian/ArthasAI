{"text": "# Self-critical Sequence Training for Image Captioning\n\nSteven J. Rennie\\({}^{1}\\), Etienne Marcheret\\({}^{1}\\), Youssef Mroueh, Jerret Ross and Vaibhava Goel\\({}^{1}\\)\n\n Watson Multimodal Algorithms and Engines Group\n\nIBM T.J. Watson Research Center, NY, USA\n\nsteve@fusemachines.com, {etiennemarcheret, vaibhavagoel}@gmail.com, {mroueh, rossja}@us.ibm.com\n\n###### Abstract\n\nRecently it has been shown that policy-gradient methods for reinforcement learning can be utilized to train deep end-to-end systems directly on non-differentiable metrics for the task at hand. In this paper we consider the problem of optimizing image captioning systems using reinforcement learning, and show that by carefully optimizing our systems using the test metrics of the MSCOCO task, significant gains in performance can be realized. Our systems are built using a new optimization approach that we call self-critical sequence training (SCST). SCST is a form of the popular REINFORCE algorithm that, rather than estimating a \"baseline\" to normalize the rewards and reduce variance, utilizes the output of its own test-time inference algorithm to normalize the rewards it experiences. Using this approach, estimating the reward signal (as actor-critic methods must do) and estimating normalization (as REINFORCE algorithms typically do) is avoided, while at the same time harmonizing the model with respect to its test-time inference procedure. Empirically we find that directly optimizing the CIDEr metric with SCST and greedy decoding at test-time is highly effective. Our results on the MSCOCO evaluation sever establish a new state-of-the-art on the task, improving the best result in terms of CIDEr from 104.9 to 114.7.\n\n## 1 Introduction\n\nImage captioning aims at generating a natural language description of an image. Open domain captioning is a very challenging task, as it requires a fine-grained understanding of the global and the local entities in an image, as well as their attributes and relationships. The recently released MSCOCO challenge [1] provides a new, larger scale platform for evaluating image captioning systems, complete with an evaluation server for benchmarking competing methods. Deep learning approaches to sequence modeling have yielded impressive results on the task, dominating the task leaderboard. Inspired by the recently introduced encoder/decoder paradigm for machine translation using recurrent neural networks (RNNs) [2], [3], and [4] use a deep convolutional neural network (CNN) to encode the input image, and a Long Short Term Memory (LSTM) [5] RNN decoder to generate the output caption. These systems are trained end-to-end using back-propagation, and have achieved state-of-the-art results on MSCOCO. More recently in [6], the use of spatial attention mechanisms on CNN layers to incorporate visual context--which implicitly conditions on the text generated so far--was incorporated into the generation process. It has been shown and we have qualitatively observed that captioning systems that utilize attention mechanisms lead to better generalization, as these models can compose novel text descriptions based on the recognition of the global and local entities that comprise images.\n\nAs discussed in [7], deep generative models for text are typically trained to maximize the likelihood of the next ground-truth word given the previous _ground-truth_ word using back-propagation. This approach has been called \"Teacher-Forcing\" [8]. However, this approach creates a mismatch between training and testing, since at test-time the model uses the previously generated words from the model distribution to predict the next word. This _exposure bias_[7], results in error accumulation during generation at test time, since the model has never been exposed to its own predictions.\n\nSeveral approaches to overcoming the exposure bias problem described above have recently been proposed. In [8] they show that feeding back the model's own predictions and slowly increasing the feedback probability \\(p\\) during training leads to significantly better test-time performance. Another line of work proposes \"Professor-Forcing\" [9], a technique that uses adversarial training to encourage the dynamics of the recurrent network to be the same when training conditioned on ground truth previous words and when sampling freely from the network.\n\nWhile sequence models are usually trained using thecross entropy loss, they are typically evaluated at test time using discrete and non-differentiable NLP metrics such as BLEU [10], ROUGE [11], METEOR [12] or CIDEr [13]. Ideally sequence models for image captioning should be trained to avoid exposure bias _and_ directly optimize metrics for the task at hand.\n\nRecently it has been shown that both the exposure bias and non-differentiable task metric issues can be addressed by incorporating techniques from Reinforcement Learning (RL) [14]. Specifically in [7], Ranzato et al. use the REINFORCE algorithm [15] to directly optimize non-differentiable, sequence-based test metrics, and overcome both issues. REINFORCE as we will describe, allows one to optimize the gradient of the expected reward by sampling from the model during training, and treating those samples as ground-truth labels (that are re-weighted by the reward they deliver). The major limitation of the approach is that the expected gradient computed using mini-batches under REINFORCE typically exhibit high variance, and without proper context-dependent normalization, is typically unstable. The recent discovery that REINFORCE with proper bias correction using learned \"baselines\" is effective has led to a flurry of work in applying REINFORCE to problems in RL, supervised learning, and variational inference [16, 17, 18]. Actor-critic methods [14], which instead train a second \"critic\" network to provide an _estimate_ of the value of each generated word given the policy of an actor network, have also been investigated for sequence problems recently [19]. These techniques overcome the need to sample from the policy's (actor's) action space, which can be enormous, at the expense of estimating future rewards, and training multiple networks based on one another's outputs, which as [19] explore, can also be unstable.\n\nIn this paper we present a new approach to sequence training which we call self-critical sequence training (SCST), and demonstrate that SCST can improve the performance of image captioning systems dramatically. SCST is a REINFORCE algorithm that, rather than estimating the reward signal, or how the reward signal should be normalized, utilizes the output of its own test-time inference algorithm to normalize the rewards it experiences. As a result, only samples from the model that outperform the current test-time system are given positive weight, and inferior samples are suppressed. Using SCST, attempting to estimate the reward signal, as actor-critic methods must do, and estimating normalization, as REINFORCE algorithms must do, is avoided, while at the same time harmonizing the model with respect to its test-time inference procedure. Empirically we find that directly optimizing the CIDEr metric with SCST and greedy decoding at test-time is highly effective. Our results on the MSCOCO evaluation sever establish a new state-of-the-art on the task, improving the best result in terms of CIDEr from 104.9 to 114.7.\n\n## 2 Captioning Models\n\nIn this section we describe the recurrent models that we use for caption generation.\n\n**FC models.** Similarly to [3, 4], we first encode the input image \\(F\\) using a deep CNN, and then embed it through a linear projection \\(W_{I}\\). Words are represented with one hot vectors that are embedded with a linear embedding \\(E\\) that has the same output dimension as \\(W_{I}\\). The beginning of each sentence is marked with a special BOS token, and the end with an EOS token. Under the model, words are generated and then fed back into the LSTM, with the image treated as the first word \\(W_{I}CNN(F)\\). The following updates for the hidden units and cells of an LSTM define the model [5]:\n\n\\[x_{t} =E1_{w_{t-1}}\\text{ for }t>1,x_{1}=W_{I}CNN(F)\\] \\[i_{t} =\\sigma\\left(W_{ix}x_{t}+W_{ih}h_{t-1}+b_{i}\\right)\\text{ \\ ( Input Gate)}\\] \\[f_{t} =\\sigma\\left(W_{fx}x_{t}+W_{fh}h_{t-1}+b_{f}\\right)\\text{ (Forget Gate)}\\] \\[o_{t} =\\sigma\\left(W_{ox}x_{t}+W_{oh}h_{t-1}+b_{o}\\right)\\text{ \\ ( Output Gate)}\\] \\[c_{t} =i_{t}\\odot\\phi(W_{zx}^{\\otimes}x_{t}+W_{zh}^{\\otimes}h_{t-1}+b_{ z}^{\\otimes})+f_{t}\\odot c_{t-1}\\] \\[h_{t} =o_{t}\\odot\\tanh(c_{t})\\] \\[s_{t} =W_{s}h_{t},\\]\n\nwhere \\(\\phi\\) is a maxout non-linearity with \\(2\\) units (\\(\\otimes\\) denotes the units) and \\(\\sigma\\) is the sigmoid function. We initialize \\(h_{0}\\) and \\(c_{0}\\) to zero. The LSTM outputs a distribution over the next word \\(w_{t}\\) using the softmax function:\n\n\\[w_{t}\\sim\\operatorname{softmax}\\left(\\operatorname{s_{t}}\\right) \\tag{1}\\]\n\nIn our architecture, the hidden states and word and image embeddings have dimension \\(512\\). Let \\(\\theta\\) denote the parameters of the model. Traditionally the parameters \\(\\theta\\) are learned by maximizing the likelihood of the observed sequence. Specifically, given a target ground truth sequence \\((w_{1}^{*},\\dots,w_{T}^{*})\\), the objective is to minimize the cross entropy loss (XE):\n\n\\[L(\\theta)=-\\sum_{t=1}^{T}\\log(p_{\\theta}(w_{t}^{*}|w_{1}^{*},\\dots w_{t-1}^{*})), \\tag{2}\\]\n\nwhere \\(p_{\\theta}(w_{t}|w_{1},\\dots w_{t-1})\\) is given by the parametric model in Equation (1).\n\n**Attention Model (Att2in).** Rather than utilizing a static, spatially pooled representation of the image, attention models dynamically re-weight the input spatial (CNN) features to focus on specific regions of the image at each time step. In this paper we consider a modification of the architecture of the attention model for captioning given in [6], and input the attention-derived image feature only to the cell node of the LSTM.\n\n\\(x_{t}=E1_{w_{t-1}}\\) for \\(t\\geq 1\\)\\(w_{0}=BOS\\)\n\n\\[i_{t} =\\sigma\\left(W_{ix}x_{t}+W_{ih}h_{t-1}+b_{i}\\right)\\ \\ \\text{(Input Gate)}\\] \\[f_{t} =\\sigma\\left(W_{fx}x_{t}+W_{fh}h_{t-1}+b_{f}\\right)\\ \\text{(Forget Gate)}\\] \\[o_{t} =\\sigma\\left(W_{ox}x_{t}+W_{oh}h_{t-1}+b_{o}\\right)\\ \\text{(Output Gate)}\\] \\[c_{t} =i_{t}\\odot\\phi(W_{zx}^{\\otimes}x_{t}+W_{zI}^{\\otimes}t_{t}+W_{zh} ^{\\otimes}h_{t-1}+b_{z}^{\\otimes})+f_{t}\\odot c_{t-1}\\] \\[h_{t} =o_{t}\\odot\\tanh(c_{t})\\] \\[s_{t} =W_{s}h_{t},\\]\n\nwhere \\(I_{t}\\) is the attention-derived image feature. This feature is derived as in [6] as follows: given CNN features at \\(N\\) locations \\(\\{I_{1},\\ldots I_{N}\\}\\), \\(I_{t}=\\sum_{i=1}^{N}\\alpha_{t}^{i}I_{i}\\), where \\(\\alpha_{t}=\\operatorname{softmax}(a_{t}+b_{\\alpha})\\), and \\(a_{t}^{i}=W\\tanh(W_{aI}i_{t}+W_{ah}h_{t-1}+b_{a})\\). In this work we set the dimension of \\(W\\) to \\(1\\times 512\\), and set \\(c_{0}\\) and \\(h_{0}\\) to zero. Let \\(\\theta\\) denote the parameters of the model. Then \\(p_{\\theta}(w_{t}|w_{1},\\ldots w_{t-1})\\) is again defined by (1). The parameters \\(\\theta\\) of attention models are also traditionally learned by optimizing the XE loss (2).\n\n**Attention Model (Att2all).** The standard attention model presented in [6] also feeds then attention signal \\(I_{t}\\) as an input into all gates of the LSTM, and the output posterior. In our experiments feeding \\(I_{t}\\) to all gates in addition to the input did not boost performance, but feeding \\(I_{t}\\) to both the gates and the outputs resulted in significant gains when ADAM [20] was used.\n\n## 3 Reinforcement Learning\n\n**Sequence Generation as an RL problem.** As described in the previous section, captioning systems are traditionally trained using the cross entropy loss. To directly optimize NLP metrics and address the exposure bias issue, we can cast our generative models in the Reinforcement Learning terminology as in [7]. Our recurrent models (LSTMs) introduced above can be viewed as an \"agent\" that interacts with an external \"environment\" (words and image features). The parameters of the network, \\(\\theta\\), define a policy \\(p_{\\theta}\\), that results in an \"action\" that is the prediction of the next word. After each action, the agent (the LSTM) updates its internal \"state\" (cells and hidden states of the LSTM, attention weights etc). Upon generating the end-of-sequence (EOS) token, the agent observes a \"reward\" that is, for instance, the CIDEr score of the generated sentence--we denote this reward by \\(r\\). The reward is computed by an evaluation metric by comparing the generated sequence to corresponding ground-truth sequences. The goal of training is to minimize the negative expected reward:\n\n\\[L(\\theta)=-\\mathbb{E}_{w^{s}\\sim p_{\\theta}}\\left[r(w^{s})\\right], \\tag{3}\\]\n\nwhere \\(w^{s}=(w_{1}^{s},\\ldots w_{T}^{s})\\) and \\(w_{t}^{s}\\) is the word sampled from the model at the time step \\(t\\). In practice \\(L(\\theta)\\) is typically estimated with a single sample from \\(p_{\\theta}\\):\n\n\\[L(\\theta)\\approx-r(w^{s}),\\;w^{s}\\sim p_{\\theta}.\\]\n\n**Policy Gradient with REINFORCE.** In order to compute the gradient \\(\\nabla_{\\theta}L(\\theta)\\), we use the REINFORCE algorithm [15](See also Chapter 13 in [14]). REINFORCE is based on the observation that the expected gradient of a non-differentiable reward function can be computed as follows:\n\n\\[\\nabla_{\\theta}L(\\theta)=-\\mathbb{E}_{w^{s}\\sim p_{\\theta}}\\left[r(w^{s}) \\nabla_{\\theta}\\log p_{\\theta}(w^{s})\\right]. \\tag{4}\\]\n\nIn practice the expected gradient can be approximated using a single Monte-Carlo sample \\(w^{s}=(w_{1}^{s}\\ldots w_{T}^{s})\\) from \\(p_{\\theta}\\), for each training example in the minibatch:\n\n\\[\\nabla_{\\theta}L(\\theta)\\approx-r(w^{s})\\nabla_{\\theta}\\log p_{\\theta}(w^{s}).\\]\n\n**REINFORCE with a Baseline.** The policy gradient given by REINFORCE can be generalized to compute the reward associated with an action value _relative_ to a reference reward or _baseline_\\(b\\):\n\n\\[\\nabla_{\\theta}L(\\theta)=-\\mathbb{E}_{w^{s}\\sim p_{\\theta}}\\left[(r(w^{s})-b) \\nabla_{\\theta}\\log p_{\\theta}(w^{s})\\right]. \\tag{5}\\]\n\nThe baseline can be an arbitrary function, as long as it does not depend on the \"action\" \\(w^{s}\\)[14], since in this case:\n\n\\[\\mathbb{E}_{w^{s}\\sim p_{\\theta}}\\left[b\\nabla_{\\theta}\\log p_{ \\theta}(w^{s})\\right] =b\\sum_{w_{s}}\\nabla_{\\theta}p_{\\theta}(w^{s})\\] \\[=b\\nabla_{\\theta}\\sum_{w_{s}}p_{\\theta}(w^{s})\\] \\[=b\\nabla_{\\theta}1=0. \\tag{6}\\]\n\nThis shows that the baseline does not change the expected gradient, but importantly, it can reduce the variance of the gradient estimate. For each training case, we again approximate the expected gradient with a single sample \\(w^{s}\\sim p_{\\theta}\\):\n\n\\[\\nabla_{\\theta}L(\\theta)\\approx-(r(w^{s})-b)\\nabla_{\\theta}\\log p_{\\theta}(w^{ s}). \\tag{7}\\]\n\nNote that if \\(b\\) is function of \\(\\theta\\) or \\(t\\) as in [7], equation (6) still holds and \\(b(\\theta)\\) is a valid baseline.\n\n**Final Gradient Expression.** Using the chain rule, and the parametric model of \\(p_{\\theta}\\) given in Section 2 we have:\n\n\\[\\nabla_{\\theta}L(\\theta)=\\sum_{t=1}^{T}\\frac{\\partial L(\\theta)}{\\partial s_{t }}\\frac{\\partial s_{t}}{\\partial\\theta},\\]\n\nwhere \\(s_{t}\\) is the input to the softmax function. Using REINFORCE with a baseline \\(b\\) the estimate of the gradient of \\(\\frac{\\partial L(\\theta)}{\\partial s_{t}}\\) is given by [17]:\n\n\\[\\frac{\\partial L(\\theta)}{\\partial s_{t}}\\approx(r(w^{s})-b)(p_{\\theta}(w_{t}|h _{t})-1_{w_{t}^{s}}). \\tag{8}\\]\n\n## 4 Self-critical sequence training (SCST)\n\nThe central idea of the self-critical sequence training (SCST) approach is to baseline the REINFORCE algorithm with the reward obtained by the current model under the inference algorithm used at test time. The gradient of the negative reward of a sample \\(w^{s}\\) from the model w.r.t. to the softmax activations at time-step \\(t\\) then becomes:\n\n\\[\\frac{\\partial L(\\theta)}{\\partial s_{t}}=(r(w^{s})-r(\\hat{w}))(p_{\\theta}(w_{t }|h_{t})-1_{w_{t}^{\\ast}}). \\tag{9}\\]\n\nwhere \\(r(\\hat{w})\\) again is the reward obtained by the current model under the inference algorithm used at test time. Accordingly, samples from the model that return higher reward than \\(\\hat{w}\\) will be \"pushed up\", or increased in probability, while samples which result in lower reward will be suppressed. Like MIXER [7], SCST has all the advantages of REINFORCE algorithms, as it directly optimizes the true, sequence-level, evaluation metric, but avoids the usual scenario of having to learn a (context-dependent) _estimate_ of expected future rewards as a baseline. In practice we have found that SCST has much lower variance, and can be more effectively trained on mini-batches of samples using SGD. Since the SCST baseline is based on the test-time estimate under the current model, SCST is forced to improve the performance of the model under the inference algorithm used at test time. This encourages training/test time consistency like the maximum likelihood-based approaches \"Data as Demonstrator\" [8], \"Professor Forcing\" [9], and E2E [7], but importantly, it can directly optimize sequence metrics. Finally, SCST is self-critical, and so avoids all the inherent training difficulties associated with actor-critic methods, where a second \"critic\" network must be trained to estimate value functions, and the actor must be trained on _estimated_ value functions rather than actual rewards.\n\nIn this paper we focus on scenario of greedy decoding, where:\n\n\\[\\hat{w}_{t}=\\arg\\max_{w_{t}}p(w_{t}\\,|\\,h_{t}) \\tag{10}\\]\n\nThis choice, depicted in Figure 1, minimizes the impact of baselining with the test-time inference algorithm on training time, since it requires only one additional forward pass, and trains the system to be optimized for fast, greedy decoding at test-time.\n\n**Generalizations.** The basic SCST approach described above can be generalized in several ways.\n\nOne generalization is to condition the baseline on what has been generated (i.e. sampled) so far, which makes the baseline _word-dependent_, and further reduces the variance of the reward signal by making it dependent only on _future rewards_. This is achieved by baselining the reward for word \\(w^{s}_{t}\\) at timestep \\(t\\) with the reward obtained by the word sequence \\(\\bar{w}=\\{w^{s}_{1:t-1},\\hat{w}_{t:T}\\}\\), which is generated by sampling tokens for timesteps \\(1:t-1\\), and then executing the inference algorithm to complete the sequence. The resulting reward signal, \\(r(w^{s})-r(\\bar{w})\\), is a baselined future reward (advantage) signal that conditions on both the input image and the sequence \\(w^{s}_{1:t-1}\\), and remains unbiased. We call this variant _time-dependent SCST (TD-SCST)_.\n\nAnother important generalization is to utilize the inference algorithm as a critic to replace the learned critic of traditional actor-critic approaches. Like for traditional actor-critic methods, this biases the learning procedure, but can be used to trade off variance for bias. Specifically, the _primary_ reward signal at time \\(t\\) can be based on a sequence that samples only \\(n\\) future tokens, and then executes the inference algorithm to complete the sequence. The primary reward is then based on \\(\\bar{w}=\\{w^{s}_{1:t+n},\\hat{w}_{t+n+1:T}\\}\\), and can further be baselined in a time-dependent manner using TD-SCST. The resulting reward signal in this case is \\(r(\\bar{w})-r(\\bar{w})\\). We call this variant _True SCST_.\n\nWe have experimented with both TD-SCST and \"True\" SCST as described above on the MSCOCO task, but found that they did not lead to significant additional gain. We have also experimented with learning a control-variate for the SCST baseline on MSCOCO to no avail. Nevertheless, we anticipate that these generalizations will be important for other sequence modeling tasks, and policy-gradient-based RL more generally.\n\n## 5 Experiments\n\n**Dataset.** We evaluate our proposed method on the MSCOCO dataset [1]. For offline evaluation purposes we used the data splits from [21]. The training set contains \\(113,287\\) images, along with \\(5\\) captions each. We use a set of \\(5K\\) image for validation and report results on a test set of \\(5K\\) images as well, as given in [21]. We report four widely used automatic evaluation metrics, BLEU-4, ROUGEL, METEOR, and CIDEr. We prune the vocabulary and drop any word that has count less then five, we end up with a vocabulary of size 10096 words.\n\n**Image Features** 1) _FC Models._ We use two type of Features: a) (FC-2k) features, where we encode each image with Resnet-101 (\\(101\\) layers) [22]. Note that we do not rescale or crop each image. Instead we encode the full image with the final convolutional layer of resnet, and apply average pooling, which results in a vector of dimension \\(2048\\). b) (FC-15K) features where we stack average pooled \\(13\\) layers of Resnet-101 (\\(11\\times 1024\\) and \\(2\\times 2048\\)). These \\(13\\) layers are the odd layers of conv4 and conv5, with the exception of the 23rd layer of conv4, which was omitted. This results in a feature vector of dimension 15360.\n\n2) _Spatial CNN features for Attention models:_ (Att2in) We encode each image using the residual convolutional neural network Resnet-101 [22]. Note that we do not rescale or crop the image. Instead we encode the fullimage with the final convolutional layer of Resnet-101, and apply spatially adaptive max-pooling so that the output has a fixed size of \\(14\\times 14\\times 2048\\). At each time step the attention model produces an attention mask over the \\(196\\) spatial locations. This mask is applied and then the result is spatially averaged to produce a \\(2048\\) dimension representation of the attended portion of the image.\n\n**Implementation Details.** The LSTM hidden, image, word and attention embeddings dimension are fixed to 512 for all of the models discussed herein. All of our models are trained according to the following recipe, except where otherwise noted. We initialize all models by training the model under the XE objective using ADAM [20] optimizer with an initial learning rate of \\(5\\times 10^{-4}\\). We anneal the learning rate by a factor of \\(0.8\\) every three epochs, and increase the probability of feeding back a sample of the word posterior by \\(0.05\\) every 5 epochs until we reach a feedback probability \\(0.25\\)[8]. We evaluate at each epoch the model on the development set and select the model with best CIDEr score as an initialization for SCST training. We then run SCST training initialized with the XE model to optimize the CIDEr metric (specifically, the CIDEr-D metric) using ADAM with a learning rate \\(5\\times 10^{-5}\\)1. Initially when experimenting with FC-2k and FC-15k models we utilized curriculum learning (CL) during training, as proposed in [7], by increasing the number of words that are sampled and trained under CIDEr by one each epoch (the prefix of the sentence remains under the XE criterion until eventually being subsumed). We have since realized that for the MSCOCO task CL is not required, and provides little to no boost in performance. The results reported here for the FC-2K and FC-15K models are trained with CL, while the attention models were trained directly on the entire sentence for all epochs after being initialized by the XE seed models.\n\nFootnote 1: In the case of the Att2all models, the XE model was trained for only 20 epochs, and the learning rate was also annealed during RL training.\n\n### Offline Evaluation\n\n**Evaluating different RL training strategies.**\n\nTable 1 compares the performance of SCST to MIXER [7] (test set, Karpathy splits). In this experiment, we utilize \"curriculum learning\" (CL) by optimizing the expected reward of the metric on the last \\(n\\) words of each training sentence, optimizing XE on the remaining sentence prefix, and\n\n\\begin{table}\n\\begin{tabular}{l|c c c c} \\hline \\hline Training & \\multicolumn{4}{c}{Evaluation Metric} \\\\ Metric & CIDEr & BLEU4 & ROUGEL & METEOR \\\\ \\hline XE & 90.9 & 28.6 & 52.3 & 24.1 \\\\ XE (beam) & 94.0 & 29.6 & 52.6 & 25.2 \\\\ \\hline MIXER-B & 101.9 & 30.9 & 53.8 & 24.9 \\\\ MIXER & 104.9 & 31.7 & **54.3** & 25.4 \\\\ SCST & **106.3** & **31.9** & **54.3** & **25.5** \\\\ \\hline \\hline \\end{tabular}\n\\end{table}\nTable 1: Performance of self-critical sequence training (SCST) versus MIXER [7] and MIXER without a baseline (MIXER-B) on the test portion of the Karpathy splits when trained to optimize the CIDEr metric (FC-2K models). All improve the seed cross-entropy trained model, but SCST outperforms MIXER.\n\nFigure 1: Self-critical sequence training (SCST). The weight put on words of a sampled sentence from the model is determined by the difference between the reward for the sampled sentence and the reward obtained by the estimated sentence under the test-time inference procedure (greedy inference depicted). This harmonizes learning with the inference procedure, and lowers the variance of the gradients, improving the training procedure.\n\n[MISSING_PAGE_FAIL:6]\n\nof MSCOCO, as we will see in Section 6.\n\n**Model Ensembling.** In this section we investigate the performance of ensembling over 4 random seeds of the XE and SCST-trained FC models and attention models. We see in Table 5 that ensembling improves performance and confirms the supremacy of attention modeling, and establishes yet another state of the art result on Karpathy splits [21]. Note that in our case we ensemble only \\(4\\) models and we don't do any fine-tuning of the Resnet. NIC [23], in contrast, used an ensemble of \\(15\\) models with fine-tuned CNNs.\n\n### Online Evaluation on MS-COCO Server\n\nTable 6 reports the performance of two variants of 4 ensembled attention models trained with self-critical sequence training (SCST) on the official MSCOCO evaluation server. The previous best result on the leaderboard (as of April 10, 2017) is also depicted. We outperform the previous best system on all evaluation metrics.\n\n## 6 Example of Generated Captions\n\nHere we provide a qualitative example of the captions generated by our systems for the image in figure 6. This picture is taken from the objects out-of-context (OOOC) dataset of images [24]. It depicts a boat situated in an unusual context, and tests the ability of our models to compose descriptions of images that differ from those seen during training. The top 5 captions returned by the XE and SCST-trained FC-2K, FC-15K, and attention model ensembles when deployed with a decoding \"beam\" of 5 are depicted in figure 73. On this image the FC models fail completely, and the SCST-trained ensemble of attention models is the only system that is able to correctly describe the image. In general we found that the performance of all captioning systems on MSCOCO data is qualitatively similar, while on images containing objects situated in an uncommon context [24] (i.e. unlike the MSCOCO training set) our attention models perform much better, and SCST-trained attention models output yet more accurate and descriptive captions. In general we qualitatively found that SCST-trained attention models describe images more accurately, and with higher\n\nFigure 4: Mean/std. gradient variance of SCST versus REINFORCE with learned baseline (MIXER less CL), for Att2all models (4 seeds) on the Karpathy training set (CIDEr-D optimized).\n\nFigure 5: Mean/std. word posterior entropy of SCST versus REINFORCE with learned baseline (MIXER less CL), for Att2all models (4 seeds) on the Karpathy training set (CIDEr-D optimized).\n\n\\begin{table}\n\\begin{tabular}{l|c c c c} \\hline \\hline Training & \\multicolumn{4}{c}{Evaluation Metric} \\\\ Metric & CIDEr & BLEU4 & ROUGEL & METEOR \\\\ \\hline XE & 90.9 & 28.6 & 52.3 & 24.1 \\\\ XE (beam) & 94.0 & 29.6 & 52.6 & 25.2 \\\\ \\hline CIDEr & **106.3** & 31.9 & 54.3 & 25.5 \\\\ BLEU & 94.4 & **33.2** & 53.9 & 24.6 \\\\ ROUGEL & 97.7 & 31.6 & **55.4** & 24.5 \\\\ METEOR & 80.5 & 25.3 & 51.3 & **25.9** \\\\ \\hline \\hline \\end{tabular}\n\\end{table}\nTable 3: Performance on the test portion of the Karpathy splits [21] as a function of training metric ( FC-2K models). Optimizing the CIDEr metric increases the overall performance under the evaluation metrics the most significantly. The performance of the seed cross-entropy (XE) model is also depicted. All models were decoded greedily, with the exception of the XE beam search result, which was optimized to beam 3 on the validation set.\n\nconfidence, as reflected in Figure 7, where the average of the log-likelihoods of the words in each generated caption are also depicted. Additional examples can be found in the supplementary material. Note that we found that Att2in attention models actually performed better than our Att2all models when applied to images \"from the wild\", so here we focus on demonstrating them.\n\n## 7 Discussion and Future Work\n\nIn this paper we have presented a simple and efficient approach to more effectively baselining the REINFORCE algorithm for policy-gradient based RL, which allows us to more effectively train on non-differentiable metrics, and leads to significant improvements in captioning performance on MSCOCO--our results on the MSCOCO evaluation sever establish a new state-of-the-art on the task. The self-critical approach, which normalizes the reward obtained by sampled sentences with the reward obtained by the model under the test-time inference algorithm is intuitive, and avoids having to estimate both action-dependent and action-independent reward functions.\n\n\\begin{table}\n\\begin{tabular}{l|c c c c} \\hline \\hline Ensemble & \\multicolumn{4}{c}{Evaluation Metric} \\\\ SCST models & CIDEr & BLEU4 & ROUGEL & METEOR \\\\ \\hline Ens. 4 (Att2all) & **114.7** & **35.2** & **56.3** & **27.0** \\\\ Ens. 4 (Att2in) & 112.3 & 34.4 & 55.9 & 26.8 \\\\ Previous best & 104.9 & 34.3 & 55.2 & 26.6 \\\\ \\hline \\hline \\end{tabular}\n\\end{table}\nTable 6: Performance of 4 ensembled attention models trained with self-critical sequence training (SCST) on the official MSCOCO evaluation server (5 reference captions). The previous best result on the leaderboard (as of 04/10/2017) is also depicted ( [http://mscoco.org/dataset/#captions-leaderboard](http://mscoco.org/dataset/#captions-leaderboard), Table C5, Watson Multimodal).\n\n\\begin{table}\n\\begin{tabular}{l|c|c c c c} \\hline \\hline \\multicolumn{6}{c}{Single Best Models (XE)} \\\\ \\hline Model & Search & \\multicolumn{4}{c}{Evaluation Metric} \\\\ Type & Method & CIDEr & BLEU4 & ROUGEL & METEOR \\\\ \\hline \\multirow{2}{*}{FC-2K} & greedy & 90.9 & 28.6 & 52.3 & 24.1 \\\\  & beam & 94.0 & 29.6 & 52.6 & 25.2 \\\\ \\hline \\multirow{2}{*}{FC-15K} & greedy & 94.1 & 29.5 & 52.9 & 24.4 \\\\  & beam & 96.1 & 30.0 & 52.9 & 25.2 \\\\ \\hline \\multirow{2}{*}{Att2in} & greedy & 99.0 & 30.6 & 53.8 & 25.2 \\\\  & beam & **101.3** & **31.3** & **54.3** & **26.0** \\\\ \\hline \\multirow{2}{*}{Att2all (RL seed)} & greedy & 97.9 & 29.3 & 53.4 & 25.4 \\\\  & beam & 99.4 & 30.0 & 53.4 & 25.9 \\\\ \\hline \\hline \\multicolumn{6}{c}{Single Best Models (SCST unless noted o.w.)} \\\\ \\hline Model & Search & \\multicolumn{4}{c}{Evaluation Metric} \\\\ Type & Method & CIDEr & BLEU4 & ROUGEL & METEOR \\\\ \\hline \\multirow{2}{*}{FC-2K} & greedy & 106.3 & 31.9 & 54.3 & 25.5 \\\\  & beam & 106.3 & 31.9 & 54.3 & 25.5 \\\\ \\hline \\multirow{2}{*}{FC-15K} & greedy & 106.4 & 32.2 & 54.6 & 25.5 \\\\  & beam & 106.6 & 32.4 & 54.7 & 25.6 \\\\ \\hline \\multirow{2}{*}{Att2in} & greedy & 111.3 & 33.3 & 55.2 & 26.3 \\\\  & beam & 111.4 & 33.3 & 55.3 & 26.3 \\\\ \\hline \\multirow{2}{*}{4 Att2all (REINF.)} & greedy & 110.2 & 32.7 & 55.1 & 26.0 \\\\  & beam & 110.5 & 32.8 & 55.2 & 26.1 \\\\ \\hline \\multirow{2}{*}{4 Att2all (MIXER-CL)} & greedy & 112.9 & 34.0 & 55.5 & 26.4 \\\\  & beam & 113.0 & 34.1 & 55.5 & 26.5 \\\\ \\hline \\multirow{2}{*}{Att2all} & greedy & 113.7 & 34.1 & 55.6 & 26.6 \\\\  & beam & **114.0** & **34.2** & **55.7** & **26.7** \\\\ \\hline \\hline \\end{tabular}\n\\end{table}\nTable 4: Performance of the best XE and corr. SCST-trained single models on the Karpathy test split (best of 4 random seeds). The results obtained via the greedy decoding and optimized beam search are depicted. Models learned using SCST were trained to directly optimize the CIDEr metric. MIXER less CL results (MIXER-) are also included.\n\n\\begin{table}\n\\begin{tabular}{l|c|c c c c} \\hline \\hline \\multicolumn{6}{c}{Ensembled Models (XE)} \\\\ \\hline Model & Search & \\multicolumn{4}{c}{Evaluation Metric} \\\\ Type & Method & CIDEr & BLEU4 & ROUGEL & METEOR \\\\ \\hline \\multirow{2}{*}{4 FC-2K} & greedy & 96.3 & 30.1 & 53.5 & 24.8 \\\\  & beam & 99.2 & 31.2 & 53.9 & 25.8 \\\\ \\hline \\multirow{2}{*}{4 FC-15K} & greedy & 97.7 & 30.7 & 53.8 & 25.0 \\\\  & beam & 100.7 & 31.7 & 54.2 & 26.0 \\\\ \\hline \\multirow{2}{*}{4 Att2in} & greedy & 102.8 & 32.0 & 54.7 & 25.7 \\\\  & beam & **106.5** & **32.8** & **55.1** & **26.7** \\\\ \\hline Att2all & greedy & 102.0 & 31.2 & 54.4 & 26.0 \\\\  & beam & 104.7 & 32.2 & 54.8 & 26.7 \\\\ \\hline \\hline \\multicolumn{6}{c}{Ensembled Models (SCST unless o.w. noted)} \\\\ \\hline Model & Search & \\multicolumn{4}{c}{Evaluation Metric} \\\\ Type & Method & CIDEr & BLEU4 & ROUGEL & METEOR \\\\ \\hline \\multirow{2}{*}{4 FC-2K} & greedy & 108.9 & 33.1 & 54.9 & 25.7 \\\\  & beam & 108.9 & 33.2 & 54.9 & 25.7 \\\\ \\hline \\multirow{2}{*}{4 FC-15K} & greedy & 110.4 & 33.4 & 55.4 & 26.1 \\\\  & beam & 110.4 & 33.4 & 55.4 & 26.2 \\\\ \\hline \\multirow{2}{*}{4 Att2in} & greedy & 114.7 & 34.6 & 56.2 & 26.8 \\\\  & beam & 115.2 & 34.8 & 56.3 & 26.9 \\\\ \\hline \\multirow{2}{*}{4 Att2all (REINF.)} & greedy & 113.8 & 34.2 & 56.0 & 26.5 \\\\  & beam & 113.6 & 33.9 & 55.9 & 26.5 \\\\ \\hline \\multirow{2}{*}{4 Att2all (MIXER-CL)} & greedy & 116.6 & 34.9 & 56.3 & 26.9 \\\\  & beam & 116.7 & 35.1 & 56.4 & 26.9 \\\\ \\hline \\multirow{2}{*}{4 Att2all} & greedy & 116.8 & 35.2 & 56.5 & 27.0 \\\\  & beam & **117.5** & **35.4** & **56.6** & **27.1** \\\\ \\hline \\hline \\end{tabular}\n\\end{table}\nTable 5: Performance of Ensembled XE and SCST-trained models on the Karpathy test split (ensembled over 4 random seeds). The models learned using self-critical sequence training (SCST) were trained to optimize the CIDEr metric. MIXER less CL results (MIXER-) are also included.\n\nFigure 6: An image from the objects out-of-context (OOOC) dataset of images from [24].\n\nFigure 7: Captions generated for the image depicted in Figure 6 by the various models discussed in the paper. Beside each caption we report the average log probability of the words in the caption. On this image, which presents an object situated in an atypical context [24], the FC models fail to give an accurate description, while the attention models handle the previously unseen image composition well. The models trained with SCST return a more accurate and more detailed summary of the image.\n\n## References\n\n* [1] Tsung-Yi Lin, Michael Maire, Serge J. Belongie, Lubomir D. Bourdev, Ross B. Girshick, James Hays, Pietro Perona, Deva Ramanan, Piotr Dollar, and C. Lawrence Zitnick. Microsoft COCO: common objects in context. _ECCV_, 2014.\n* [2] Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk, and Yoshua Bengio. Learning phrase representations using RNN encoder-decoder for statistical machine translation. _EMNLP_, 2014.\n* [3] Oriol Vinyals, Alexander Toshev, Samy Bengio, and Dumitru Erhan. Show and tell: A neural image caption generator. _CVPR_, 2015.\n* [4] Andrej Karpathy and Fei-Fei Li. Deep visual-semantic alignments for generating image descriptions. _CVPR_, 2015.\n* [5] Sepp Hochreiter and Jurgen Schmidhuber. Long short-term memory. _Neural Comput._, 1997.\n* [6] Kelvin Xu, Jimmy Ba, Ryan Kiros, Kyunghyun Cho, Aaron C. Courville, Ruslan Salakhutdinov, Richard S. Zemel, and Yoshua Bengio. Show, attend and tell: Neural image caption generation with visual attention. In _ICML_, 2015.\n* [7] Marc'Aurelio Ranzato, Sumit Chopra, Michael Auli, and Wojciech Zaremba. Sequence level training with recurrent neural networks. _ICLR_, 2015.\n* [8] Samy Bengio, Oriol Vinyals, Navdeep Jaitly, and Noam Shazeer. Scheduled sampling for sequence prediction with recurrent neural networks. In _NIPS_, 2015.\n* [9] Alex Lamb, Anirudh Goyal, Ying Zhang, Saizheng Zhang, Aaron Courville, and Yoshua Bengio. Professor forcing: A new algorithm for training recurrent networks. _Neural Information Processing Systems (NIPS) 2016_, 2016.\n* [10] Kishore Papineni, Salim Roukos, Todd Ward, and Wei-Jing Zhu. Bleu: A method for automatic evaluation of machine translation. In _ACL_, 2002.\n* [11] Chin-Yew Lin. Rouge: A package for automatic evaluation of summaries. In _Text summarization branches out: Proceedings of the ACL-04 workshop_, volume 8. Barcelona, Spain, 2004.\n* [12] Satanjeev Banerjee and Alon Lavie. Meteor: An automatic metric for mt evaluation with improved correlation with human judgments. In _Proceedings of the acl workshop on intrinsic and extrinsic evaluation measures for machine translation and/or summarization_, volume 29, pages 65-72, 2005.\n* [13] Ramakrishna Vedantam, C. Lawrence Zitnick, and Devi Parikh. Cider: Consensus-based image description evaluation. In _CVPR_, 2015.\n* [14] Richard S. Sutton and Andrew G. Barto. _Reinforcement learning: An introduction_. MIT Press, 1998.\n* [15] Ronald J. Williams. Simple statistical gradient-following algorithms for connectionist reinforcement learning. In _Machine Learning_, pages 229-256, 1992.\n* [16] John Schulman, Philipp Moritz, Sergey Levine, Michael Jordan, and Pieter Abbeel. High-dimensional continuous control using generalized advantage estimation. _arXiv preprint arXiv:1506.02438_, 2015.\n* [17] Wojciech Zaremba and Ilya Sutskever. Reinforcement learning neural turing machines. _Arxiv_, 2015.\n* [18] Andriy Mnih and Karol Gregor. Neural variational inference and learning in belief networks. _arXiv preprint arXiv:1402.0030_, 2014.\n* [19] Dzmitry Bahdanau, Philemon Brakel, Kelvin Xu, Anirudh Goyal, Ryan Lowe, Joelle Pineau, Aaron C. Courville, and Yoshua Bengio. An actor-critic algorithm for sequence prediction. _Arxiv_, 2016.\n* [20] Diederik P. Kingma and Jimmy Ba. Adam: A method for stochastic optimization. _ICLR_, 2015.\n* [21] Andrej Karpathy and Fei-Fei Li. Deep visual-semantic alignments for generating image descriptions. In _CVPR_, 2015.\n* [22] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recognition. In _CVPR_, 2016.\n* [23] Oriol Vinyals, Alexander Toshev, Samy Bengio, and Dumitru Erhan. Show and tell: Lessons learned from the 2015 MSCOCO image captioning challenge. _PAMI_, 2016.\n* [24] Myung Jinchoi, Antonio Torralba, and Alan S. Willsky. Context models and out-of-context objects. 7, 9, 11, 13, 15, 16\n\n[MISSING_PAGE_FAIL:11]\n\nfurther. So far we have not been able to substantially improve performance w.r.t. the other metrics without more substantially degrading CIDEr.\n\nFigure 8: Performance of our best Att2in model, which is trained to directly optimize the CIDEr metric, as a function of training epoch on the validation portion of the Karpathy splits, for the CIDEr, BLEU-4, ROUGE-L, and METEOR MSCOCO evaluation metrics. Optimizing CIDEr improves all of these evaluation metrics substantially.\n\nFigure 10: Captions generated by various models discussed in the paper to describe the image depicted in figure 9. Beside each caption we report the average of the log probabilities of each word, normalized by the sentence length. Notice that the attention models trained with SCST give an accurate description of this image with high confidence. Attention models trained with XE are less confident about the correct description. FC models trained with CE or SCST fail at giving an accurate description.\n\nFigure 9: Picture of a common object in MSCOCO (a giraffe) situated in an _uncommon_ context (out of COCO domain) [24].\n\nFigure 11: An image from the MSCOCO test set (Karpathy splits).\n\nFigure 12: Captions generated for the image depicted in Figure 11 by various models discussed in the paper. Beside each caption we report the average log probability of the words in the caption. All models perform well on this test image from the MSCOCO distribution. More generally we have observed that qualitatively, all models perform comparably on the MSCOCO test images.\n\nFigure 14: Captions generated for the image depicted in Figure 13 by the various models discussed in the paper. Beside each caption we report the average log probability of the words in the caption. On this image, which presents an object situated in an atypical context [24], the FC models fail to give an accurate description, while the attention models handle the previously unseen image composition well. The models trained with SCST return a more accurate and more detailed summary of the image.\n\nFigure 13: An image from the objects out-of-context (OOOC) dataset of images from [24].\n\nFigure 16: Captions generated for the image depicted in Figure 15 by the various models discussed in the paper. Beside each caption we report the average log probability of the words in the caption. On this image, which presents an object situated in an atypical context [24], the FC models fail to give an accurate description, while the attention models handle the previously unseen image composition well. The models trained with SCST return a more accurate and more detailed summary of the image.\n\nFigure 15: An image from the objects out-of-context (OOOC) dataset of images from [24]."}
